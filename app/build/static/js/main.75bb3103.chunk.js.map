{"version":3,"sources":["components/healthCheck.js","App.js","serviceWorker.js","index.js"],"names":["HealthCheck","props","checkHealth","AxiosConfig","headers","url","method","axios","then","response","data","values","console","log","value","setState","currentWeightInKG","stylePercentage","convertToPercentage","percentage","state","weightInKg","convertedWeight","Math","round","this","interval","setInterval","clearInterval","className","style","height","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gSAsEeA,E,YAlEb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAgBRC,YAAc,WACZ,IAGIC,EAAc,CAChBC,QAJY,CACZ,YAAa,oCAIbC,IAAK,uGACLC,OAAQ,OAEVC,IAAMJ,GACHK,MAAK,SAAAC,GACJ,IAAIC,EAAOD,EAASC,KAAKC,OAAO,GAChCC,QAAQC,IAAIH,EAAKI,OACjB,EAAKC,SAAS,CACZC,kBAAmBN,EAAKI,MACxBG,gBAAkB,IAAM,EAAKC,oBAAoBR,EAAKI,OAAU,IAChEK,WAAY,EAAKD,oBAAoBR,EAAKI,SAE5CF,QAAQC,IAAI,EAAKO,WAnCJ,EAuCnBF,oBAAsB,SAACG,GACrB,IAAIC,GAAmBD,EAAa,MAAM,MAAQ,IAOlD,OANAT,QAAQC,IAAIS,GACRA,EAAkB,IACpBA,EAAkB,IACTA,EAAkB,IAC3BA,EAAkB,GAEbC,KAAKC,MAAMF,IA7ClB,EAAKF,MAAQ,CACXJ,kBAAmB,EACnBG,WAAY,MAJG,E,iFAQE,IAAD,OAClBM,KAAKC,SAAWC,aAAY,kBAAM,EAAKzB,gBAAe,KACtDuB,KAAKvB,gB,6CAIL0B,cAAcH,KAAKC,Y,+BAqCnB,OACE,6BACE,yBAAKG,UAAU,oBACX,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,yBAAyBC,MAAO,CAACC,OAAQN,KAAKL,MAAMH,sBAI7E,6BAAMQ,KAAKL,MAAMD,WAAjB,U,GA7DkBa,IAAMC,WCWjBC,MAVf,WACE,OACE,yBAAKL,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,SCIYM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,MAAK,SAAAuC,GACjCA,EAAaC,kB","file":"static/js/main.75bb3103.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\nclass HealthCheck extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      currentWeightInKG: 0,\n      percentage: '0%'\n    }\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => this.checkHealth(), 5000)\n    this.checkHealth()\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  checkHealth = () => {\n    let headers = {\n      'X-M2X-KEY': 'be2c077113000e2388658e1040845db5'\n    }\n    let AxiosConfig = {\n      headers,\n      url: 'http://api-m2x.att.com/v2/devices/68b46af566ab20ed3b02622fbd273bb7/streams/keg-weight/values?limit=1',\n      method: 'GET'\n    }\n    axios(AxiosConfig)\n      .then(response => {\n        let data = response.data.values[0]\n        console.log(data.value)\n        this.setState({\n          currentWeightInKG: data.value,\n          stylePercentage: (100 - this.convertToPercentage(data.value)) + '%',\n          percentage: this.convertToPercentage(data.value)\n        })\n        console.log(this.state);\n      })\n  }\n\n  convertToPercentage = (weightInKg) => {\n    let convertedWeight = (weightInKg - 4.08)/22.23 * 100\n    console.log(convertedWeight)\n    if (convertedWeight > 100) {\n      convertedWeight = 100\n    } else if (convertedWeight < 0) {\n      convertedWeight = 0\n    }\n    return Math.round(convertedWeight)\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"coffee-container\">\n            <div className=\"coffee-stroke\">\n                <div className=\"coffee-indicator\">\n                  <div className=\"coffee-indicator-black\" style={{height: this.state.stylePercentage}}/>\n                </div>\n            </div>\n        </div>\n        <div>{this.state.percentage}%</div>\n      </div>\n    )\n  }\n}\n\nexport default HealthCheck","import React from 'react';\nimport './App.css';\nimport HealthCheck from './components/healthCheck';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <HealthCheck />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}